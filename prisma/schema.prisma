// Islanders Cricket Club Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Equipment Models (Your Bat Analytics)
model Bat {
  id          String   @id @default(cuid())
  name        String
  brand       String
  weight      Int      // in grams
  category    String   // light, medium, heavy, extra-heavy
  collection  String   // islander, drreddy, professional
  owner       String?  // player name if professional
  country     String?  // for professional players
  role        String?  // batting style/role
  emoji       String?  // player emoji
  flag        String?  // country flag
  imageUrl    String?  // bat photo from GitHub
  note        String?  // special notes
  purchaseDate DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("bats")
}

// Team & Players
model Player {
  id            String   @id @default(cuid())
  slug          String   @unique
  firstName     String
  lastName      String
  role          String   // Batter, All-rounder, Bowler, WK
  battingStyle  String?
  bowlingStyle  String?
  photoUrl      String?  // GitHub uploaded photo
  coverUrl      String?
  bio           String?
  socials       Json?
  isCaptain     Boolean  @default(false)
  isViceCaptain Boolean  @default(false)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  photos        PlayerPhoto[]
  highlights    Highlight[] @relation("PlayerHighlights")
  results       Result[]    @relation("PlayerMOM")

  @@map("players")
}

// SACL Fixtures & Results
model Fixture {
  id        String   @id @default(cuid())
  date      DateTime
  slot      String?  // Slot 1, Slot 2
  opponent  String
  location  String?
  isHome    Boolean  @default(true)
  status    String   @default("SCHEDULED") // SCHEDULED | LIVE | COMPLETED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  result    Result?
  posts     Post[]   @relation("MatchPosts")
  album     Album?
  highlights Highlight[]

  @@map("fixtures")
}

model Result {
  id         String  @id @default(cuid())
  fixtureId  String  @unique
  ourRuns    Int
  ourWkts    Int
  oppRuns    Int
  oppWkts    Int
  toss       String?
  momPlayerId String?
  highlightsMd String?
  scorecardJson Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  fixture    Fixture @relation(fields: [fixtureId], references: [id])
  momPlayer  Player? @relation("PlayerMOM", fields: [momPlayerId], references: [id])

  @@map("results")
}

// Media Hub Models
model Album {
  id          String   @id @default(cuid())
  title       String
  description String?
  coverUrl    String?  // GitHub uploaded cover
  fixtureId   String?  @unique
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  photos      Photo[]
  fixture     Fixture? @relation(fields: [fixtureId], references: [id])

  @@map("albums")
}

model Photo {
  id        String    @id @default(cuid())
  albumId   String
  filename  String    // GitHub filename
  url       String    // Full GitHub URL
  width     Int?
  height    Int?
  alt       String?
  caption   String?
  takenAt   DateTime?
  tags      String[]  // for search/filtering
  isPublic  Boolean   @default(true)
  uploadedBy String?  // admin user
  createdAt DateTime  @default(now())

  // Relations
  album     Album     @relation(fields: [albumId], references: [id])
  players   PlayerPhoto[]

  @@map("photos")
}

model PlayerPhoto {
  playerId  String
  photoId   String

  player    Player @relation(fields: [playerId], references: [id])
  photo     Photo  @relation(fields: [photoId], references: [id])

  @@id([playerId, photoId])
  @@map("player_photos")
}

// Blog & Content
model Post {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  excerpt     String?
  coverImage  String?   // GitHub uploaded image
  tags        String[]
  contentMd   String    // Markdown/MDX content
  publishedAt DateTime?
  author      String?
  fixtureId   String?
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  fixture     Fixture? @relation("MatchPosts", fields: [fixtureId], references: [id])

  @@map("posts")
}

// Video Highlights
model Highlight {
  id        String   @id @default(cuid())
  title     String
  videoUrl  String   // YouTube/Instagram URL
  thumbUrl  String?
  platform  String   // youtube, instagram, twitter
  durationS Int?
  playerId  String?
  fixtureId String?
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  player    Player?  @relation("PlayerHighlights", fields: [playerId], references: [id])
  fixture   Fixture? @relation(fields: [fixtureId], references: [id])

  @@map("highlights")
}

// Admin & Auth
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      String   @default("VIEWER") // ADMIN | EDITOR | VIEWER
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NextAuth fields
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Club Info
model ClubInfo {
  id          String @id @default(cuid())
  name        String @default("Islanders Cricket Club")
  league      String @default("San Antonio Cricket League (SACL)")
  founded     Int    @default(2020)
  homeGround  String @default("San Antonio Sports Complex")
  website     String @default("islanderscricketclub.org")
  email       String @default("info@islanderscricketclub.org")
  phone       String @default("+1 (555) 123-CRICKET")
  logoUrl     String?
  colors      Json?  // primary, secondary colors
  socialLinks Json?  // Instagram, Twitter, etc.
  updatedAt   DateTime @updatedAt

  @@map("club_info")
}